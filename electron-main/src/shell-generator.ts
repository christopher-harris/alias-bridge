import { AliasData, Alias } from "./types";
import { SHELL_ALIAS_FILE_PATH } from "./config";
import fs from "fs/promises";

/**
 * Generates the .sh alias file from the provided alias data.
 * Overwrites the existing .sh file
 */
export async function regenerateAliasShellFile(aliasData: AliasData): Promise<void> {
    console.log(`Regenerating shell alias file at: ${SHELL_ALIAS_FILE_PATH}`);
    const header =
        `# Alias file generated by AliasBridge\n` +
        `# Do not edit this file manually - changes will be overwritten.\n\n`;

    let fileContent = header;

    const aliases = Object.values(aliasData.aliases);
    for (const alias of aliases) {
        if (alias.comment && alias.comment.trim() !== '') {
            const commentLines = alias.comment.trim().split('\n');
            for (const line of commentLines) {
                fileContent += `# ${line}\n`;
            }
        }
        const escapedCommand = alias.command.replace(/'/g, "'\\''");
        fileContent += `alias ${alias.name}='${escapedCommand}'\n\n`;
    }

    try {
        await fs.writeFile(SHELL_ALIAS_FILE_PATH, fileContent.trim() + '\n', 'utf8');
        console.log('Shell alias file regenerated successfully.');
    } catch (error) {
        console.error('Error writing shell alias file:', error);
    }
}





// import {Alias} from "./types";
// import {SHELL_ALIAS_FILE_PATH} from "./config";
// import fs from "fs/promises";
//
// /**
//  * Generates the .sh alias file from the provided alias data.
//  * Overwrites the existing .sh file
//  */
// export async function regenerateAliasShellFile(aliases: Alias[]): Promise<void> {
//     console.log(`Regenerating shell alias file at: ${SHELL_ALIAS_FILE_PATH}`);
//     const header = `# Alias file generated by AliasBridge\n` +
//         `# Do not edit this file manually - changes will be overwritten.\n\n`;
//
//     let fileContent = header;
//     for (const alias of aliases) {
//         if (alias.comment && alias.comment.trim() !== '') {
//             const commentLines = alias.comment.trim().split('\n');
//             for (const line of commentLines) {
//                 fileContent += `# ${line}\n`;
//             }
//         }
//         const escapedCommand = alias.command.replace(/'/g, "'\\''");
//         fileContent += `alias ${alias.name}='${escapedCommand}'\n\n`;
//     }
//
//     try {
//         await fs.writeFile(SHELL_ALIAS_FILE_PATH, fileContent.trim() + '\n', 'utf8');
//         console.log('Shell alias file regenerated successfully.');
//     } catch (error) {
//         console.error('Error writing shell alias file:', error);
//         // Decide if you need to handle this more gracefully
//     }
// }
